"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5697],{43018:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var t=r(74848),i=r(28453);const s={title:"Open Interpreter",slug:"/integrations/interpreter",sidebar_position:6,description:"A step-by-step guide on how to integrate Jan with Open Interpreter.",keywords:["Jan","Customizable Intelligence","LLM","local AI","privacy focus","free and open source","private and offline","conversational AI","no-subscription fee","large language models","Open Interpreter integration","Open Interpreter"]},o=void 0,l={id:"guides/integrations/interpreter",title:"Open Interpreter",description:"A step-by-step guide on how to integrate Jan with Open Interpreter.",source:"@site/docs/guides/integrations/interpreter.mdx",sourceDirName:"guides/integrations",slug:"/integrations/interpreter",permalink:"/integrations/interpreter",draft:!1,unlisted:!1,editUrl:"https://github.com/janhq/docs/tree/main/docs/guides/integrations/interpreter.mdx",tags:[],version:"current",lastUpdatedBy:"Henry",lastUpdatedAt:1711732157,formattedLastUpdatedAt:"Mar 29, 2024",sidebarPosition:6,frontMatter:{title:"Open Interpreter",slug:"/integrations/interpreter",sidebar_position:6,description:"A step-by-step guide on how to integrate Jan with Open Interpreter.",keywords:["Jan","Customizable Intelligence","LLM","local AI","privacy focus","free and open source","private and offline","conversational AI","no-subscription fee","large language models","Open Interpreter integration","Open Interpreter"]},sidebar:"guidesSidebar",previous:{title:"Discord",permalink:"/integrations/discord"},next:{title:"Raycast",permalink:"/integrations/raycast"}},a={},p=[{value:"Integrate Open Interpreter with Jan",id:"integrate-open-interpreter-with-jan",level:2},{value:"Step 1: Install Open Interpreter",id:"step-1-install-open-interpreter",level:3},{value:"Step 2: Configure Jan&#39;s Local API Server",id:"step-2-configure-jans-local-api-server",level:3},{value:"Enabling Jan API Server",id:"enabling-jan-api-server",level:4},{value:"Step 3: Set the Open Interpreter Environment",id:"step-3-set-the-open-interpreter-environment",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"integrate-open-interpreter-with-jan",children:"Integrate Open Interpreter with Jan"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/KillianLucas/open-interpreter/",children:"Open Interpreter"})," lets LLMs run code (Python, Javascript, Shell, and more) locally. You can chat with Open Interpreter through a ChatGPT-like interface in your terminal by running ",(0,t.jsx)(n.code,{children:"interpreter"})," after installing. To integrate Open Interpreter with Jan, follow the steps below:"]}),"\n",(0,t.jsx)(n.h3,{id:"step-1-install-open-interpreter",children:"Step 1: Install Open Interpreter"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Install Open Interpreter by running:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"pip install open-interpreter\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["A Rust compiler is required to install Open Interpreter. If not already installed, run the following command or go to ",(0,t.jsx)(n.a,{href:"https://rustup.rs/",children:"this page"})," if you are running on windows:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",children:"sudo apt install rustc\n"})}),"\n",(0,t.jsx)(n.h3,{id:"step-2-configure-jans-local-api-server",children:"Step 2: Configure Jan's Local API Server"}),"\n",(0,t.jsxs)(n.p,{children:["Before using Open Interpreter, configure the model in ",(0,t.jsx)(n.code,{children:"Settings"})," > ",(0,t.jsx)(n.code,{children:"My Model"})," for Jan and activate its local API server."]}),"\n",(0,t.jsx)(n.h4,{id:"enabling-jan-api-server",children:"Enabling Jan API Server"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Click the ",(0,t.jsx)(n.code,{children:"<>"})," button to access the ",(0,t.jsx)(n.strong,{children:"Local API Server"})," section in Jan."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Configure the server settings, including ",(0,t.jsx)(n.strong,{children:"IP Port"}),", ",(0,t.jsx)(n.strong,{children:"Cross-Origin-Resource-Sharing (CORS)"}),", and ",(0,t.jsx)(n.strong,{children:"Verbose Server Logs"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Click ",(0,t.jsx)(n.strong,{children:"Start Server"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"step-3-set-the-open-interpreter-environment",children:"Step 3: Set the Open Interpreter Environment"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["For integration, provide the API Base (",(0,t.jsx)(n.code,{children:"http://localhost:1337/v1"}),") and the model ID (e.g., ",(0,t.jsx)(n.code,{children:"mistral-ins-7b-q4"}),") when running Open Interpreter. For example see the code below:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",children:"interpreter --api_base http://localhost:1337/v1 --model mistral-ins-7b-q4\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Open Interpreter is now ready for use!"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var t=r(96540);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);