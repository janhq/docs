"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7572],{62574:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var i=n(74848),s=n(28453);const a={title:"How to Fine-tune Large Language Models - A Tutorial",description:"Guide on Finetuning Large Language Models with Personal Dataset",slug:"/tutorial/how-to-fine-tune-llms",tags:["Large Language Models","Finetune LLM","Retrieval Augmented Generation","Personal Dataset","Customzied Dataset","Fine Tuning Tutorial"],keywords:["Large Language Models","Finetune LLM","Retrieval Augmented Generation","Personal Dataset","Customzied Dataset","Fine Tuning Tutorial"],authors:[{name:"Rex Ha",title:"LLM Researcher & Content Writer",url:"https://github.com/hahuyhoang411",image_url:"https://avatars.githubusercontent.com/u/64120343?v=4",email:"rex@jan.ai"},{name:"Ed"},{name:"Alan Dao",title:"AI Engineer",url:"https://github.com/tikikun",image_url:"https://avatars.githubusercontent.com/u/22268502?v=4",email:"alan@jan.ai"}]},r=void 0,o={id:"pending-content/blogpost/finetune-with-docs",title:"How to Fine-tune Large Language Models - A Tutorial",description:"Guide on Finetuning Large Language Models with Personal Dataset",source:"@site/docs/pending-content/blogpost/finetune-with-docs.mdx",sourceDirName:"pending-content/blogpost",slug:"/tutorial/how-to-fine-tune-llms",permalink:"/tutorial/how-to-fine-tune-llms",draft:!1,unlisted:!1,editUrl:"https://github.com/janhq/docs/tree/main/docs/pending-content/blogpost/finetune-with-docs.mdx",tags:[{label:"Large Language Models",permalink:"/tags/large-language-models"},{label:"Finetune LLM",permalink:"/tags/finetune-llm"},{label:"Retrieval Augmented Generation",permalink:"/tags/retrieval-augmented-generation"},{label:"Personal Dataset",permalink:"/tags/personal-dataset"},{label:"Customzied Dataset",permalink:"/tags/customzied-dataset"},{label:"Fine Tuning Tutorial",permalink:"/tags/fine-tuning-tutorial"}],version:"current",lastUpdatedBy:"Nicole Zhu",lastUpdatedAt:1711818688,formattedLastUpdatedAt:"Mar 30, 2024",frontMatter:{title:"How to Fine-tune Large Language Models - A Tutorial",description:"Guide on Finetuning Large Language Models with Personal Dataset",slug:"/tutorial/how-to-fine-tune-llms",tags:["Large Language Models","Finetune LLM","Retrieval Augmented Generation","Personal Dataset","Customzied Dataset","Fine Tuning Tutorial"],keywords:["Large Language Models","Finetune LLM","Retrieval Augmented Generation","Personal Dataset","Customzied Dataset","Fine Tuning Tutorial"],authors:[{name:"Rex Ha",title:"LLM Researcher & Content Writer",url:"https://github.com/hahuyhoang411",image_url:"https://avatars.githubusercontent.com/u/64120343?v=4",email:"rex@jan.ai"},{name:"Ed"},{name:"Alan Dao",title:"AI Engineer",url:"https://github.com/tikikun",image_url:"https://avatars.githubusercontent.com/u/22268502?v=4",email:"alan@jan.ai"}]}},l={},d=[{value:"1. Environment setup",id:"1-environment-setup",level:2},{value:"<strong>2. Data generation</strong>",id:"2-data-generation",level:2},{value:"<strong>3. Finetuning</strong>",id:"3-finetuning",level:2},{value:"<strong>4. Test the model</strong>",id:"4-test-the-model",level:2},{value:"Limitations",id:"limitations",level:2},{value:"<strong>Conclusions</strong>",id:"conclusions",level:2},{value:"Terminology",id:"terminology",level:2},{value:"What is Instruction tuning?",id:"what-is-instruction-tuning",level:3},{value:"What is LoRA?",id:"what-is-lora",level:3},{value:"What is Langchain?",id:"what-is-langchain",level:3},{value:"What is Flash Attention?",id:"what-is-flash-attention",level:3}];function h(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Large Language Models (LLMs) are all the rage nowadays, with people using them more and more on a daily basis. As our usage increases, many use cases require the LLM to understand our data, and there are two main approaches we can use:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Fine-tuning"}),"\n",(0,i.jsx)(t.li,{children:"Retrieval Augmented Generation (RAG)"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"This blog will investigate the first approach to see how fine-tuning performs in understanding some technical product documentation. In detail, you will learn how to:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Create a Question and Answer dataset from unstructured data"}),"\n",(0,i.jsx)(t.li,{children:"Fine-tune a model using the dataset"}),"\n",(0,i.jsx)(t.li,{children:"Run the fine-tuned model using Jan"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Let\u2019s get started!"}),"\n",(0,i.jsx)(t.h2,{id:"1-environment-setup",children:"1. Environment setup"}),"\n",(0,i.jsx)(t.p,{children:"Our first step is to install the Hugging Face libraries, which provide the backbone for running large language models (LLMs). Additionally, we'll use LangChain as our go-to tool for efficiently handling and processing our data."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Install libraries"',children:'# Install Hugging Face libraries\npip install  --upgrade \\\n  "transformers==4.36.2" \\\n  "datasets==2.16.1" \\\n  "accelerate==0.26.1" \\\n  "evaluate==0.4.1" \\\n  "bitsandbytes==0.42.0"\n\n# Install libraries for generating data\npip install  --upgrade \\\n\t"llama-cpp-python" \\\n\t"pydantic==1.10.11" \\\n\t"sentence-transformers" \\\n\t"chromadb" \\\n\t"langchain" \\\n\t"tiktoken" \\\n\t"openai==0.28"\n'})}),"\n",(0,i.jsx)(t.p,{children:"In this guide, we'll utilize ChatGPT to create our training dataset. To leverage Hugging Face and OpenAI resources, we first sign into these platforms using the commands below:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="Setting up credential keys"',children:'# Import libaries\nfrom huggingface_hub import login\nimport openai\n\n# Setting up credential keys\nOPENAI_KEY_FILE = "YOUR_KEY_HERE"\nHUGGINGFACE_KEY_FILE = "YOUR_KEY_HERE"\n\nopenai.api_key = open_file(OPENAI_KEY_FILE)\nlogin(token=HUGGINGFACE_KEY_FILE)\n'})}),"\n",(0,i.jsx)(t.h2,{id:"2-data-generation",children:(0,i.jsx)(t.strong,{children:"2. Data generation"})}),"\n",(0,i.jsxs)(t.p,{children:["In this tutorial, the \u201cdata\u201d we will use will be the ",(0,i.jsx)(t.a,{href:"https://nitro.jan.ai/",children:"Nitro documentation"}),". Nitro is an open-source, lightweight (3 MB) inference server to supercharge apps with local AI."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"About Nitro",src:n(46743).A+"",width:"987",height:"882"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Fig 1. Example of Nitro's documentation."})}),"\n",(0,i.jsx)(t.p,{children:"At a basic level, documentation is just pages filled with just words. If we give these words to the LLM as they are, it can confuse the model about what is important. Moreover, the unstructured nature of plain text doesn't provide the contextual clues that LLMs need to understand and generate meaningful responses."}),"\n",(0,i.jsxs)(t.p,{children:["To teach it, we will use a method called ",(0,i.jsx)(t.a,{href:"#what-is-instruction-tuning",children:(0,i.jsx)(t.strong,{children:'"Instruction tuning"'})}),", which involves refining the model's ability to comprehend and execute text-based instructions more effectively."]}),"\n",(0,i.jsx)(t.p,{children:"But how do we change the text from the documentation into the right data? We need to make pairs of questions and answers."}),"\n",(0,i.jsx)(t.p,{children:"The main idea is that we will break the documents into smaller pieces. Then, we use the LLM to help us develop questions and answers from those pieces."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsxs)(t.em,{children:["Note: We also open-source the ",(0,i.jsx)(t.a,{href:"https://huggingface.co/datasets/jan-hq/nitro_binarized",children:(0,i.jsx)(t.strong,{children:"Nitro\u2019s documentation training dataset"})})," in our ",(0,i.jsx)(t.a,{href:"https://huggingface.co/jan-hq",children:(0,i.jsx)(t.strong,{children:"Hugging Face Hub"})}),"."]})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Table 1. Example of Question and Answer pairs"})}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"User"}),(0,i.jsx)(t.th,{children:"Assistant"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Is Nitro an open-source tool?"}),(0,i.jsx)(t.td,{children:"Yes, Nitro is an open-source tool."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:["What does the ",(0,i.jsx)(t.code,{children:"max_tokens"})," parameter in the prompt request do?"]}),(0,i.jsxs)(t.td,{children:["The ",(0,i.jsx)(t.code,{children:"max_tokens"})," parameter in the prompt request is used to specify the maximum number of tokens that the response should contain. A token can be as small as one character or as large as one word. For example, if ",(0,i.jsx)(t.code,{children:"max_tokens"})," is set to 100, the response will contain no more than 100 tokens."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"What operating systems does the Nitro library support?"}),(0,i.jsx)(t.td,{children:"The Nitro library supports multiple operating systems including Windows, MacOS, and Linux. This cross-platform compatibility allows it to cater to a wide range of users using different OS."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Is Nitro compatible with OpenAI?"}),(0,i.jsx)(t.td,{children:"Yes, Nitro is compatible with OpenAI. This means that it can work seamlessly with models and applications built using OpenAI's technology."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"What is the endpoint '/v1/chat/completions' used for in the curl command?"}),(0,i.jsx)(t.td,{children:"The '/v1/chat/completions' endpoint in the curl command is the specific location in the server where the request is being sent. The purpose of this endpoint is to handle chat completions, likely returning the next predicted response(s) from the chat assistant based on the sent message."})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"You can create your dataset by using the following example code."}),"\n",(0,i.jsx)(t.p,{children:"First, we need to define some helper functions to process the raw documents into QnA pairs."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="Define helper functions"',children:"# Reads and returns the content of a file.\ndef read_file(filepath):\n    with open(filepath, 'r', encoding='utf-8') as file:\n        return file.read()\n\n# Generates a response from the ChatGPT model\ndef generate_chatgpt_response(messages, temperature=0.5, model=\"gpt-3.5-turbo\", max_tokens=4096):\n    response = openai.ChatCompletion.create(\n        model=model, messages=messages, temperature=temperature, max_tokens=max_tokens\n    )\n    return response['choices'][0]['message']['content']\n\n# Process Markdown files\ndef process_markdown_file(file_path, markdown_splitter, text_splitter):\n    with open(file_path, 'r') as file:\n        markdown_document = file.read()\n    md_header_splits = markdown_splitter.split_text(markdown_document)\n    return [chunk for split in md_header_splits for chunk in text_splitter.split_documents([split])]\n    \n# Extracts question and answer pairs from a given text\ndef extract_qa_pairs(text):\n    qa_pairs = []\n    current_pair = {}\n    lines = text.split('\\n')\n    for line in lines:\n        if line.startswith('\"question\": '):\n            current_pair['question'] = line.split('\"question\": ')[1].strip(' \",')\n        elif line.startswith('\"answer\": '):\n            current_pair['answer'] = line.split('\"answer\": ')[1].strip(' \",')\n            qa_pairs.append(current_pair)\n            current_pair = {}\n    return qa_pairs\n\n# Parse QnA pairs as JSON\ndef parse_response(response):\n    try:\n        parsed_data = json.loads(response)\n        return parsed_data['qa_pairs']\n    except json.JSONDecodeError:\n        return extract_qa_pairs(response)\n        \n# Create new column in the dataset\ndef create_message(row):\n    return [{\"content\": row['question'], \"role\": \"user\"}, {\"content\": row['answer'], \"role\": \"assistant\"}]\n"})}),"\n",(0,i.jsxs)(t.p,{children:["In this case, we're using the Langchain framework to streamline our work, which gives us different ways to handle the processing step with just a few lines of code. Most of our documents are written in a Markdown format, so we'll use the ",(0,i.jsx)(t.code,{children:"MarkdownHeaderTextSplitter"})," function combined with the ",(0,i.jsx)(t.code,{children:"TokenTextSplitter"})," function to ensure we give the LLM the right amount of text to create questions and answers."]}),"\n",(0,i.jsx)(t.p,{children:"We chose a chunk size of 300 tokens to ensure that when we generate QnA pairs, the generation won't be out of context with the token length of the LLM (normally, it\u2019s capped at 4096 tokens). Also, we applied the overlap technique so that each chunk will contain the context from the previous chunk to make the chunk coherent."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="Create logic for processing raw data"',children:'# Chunking settings\nHEADERS_TO_SPLIT_ON = [("#", "Header 1"), ("##", "Header 2"), ("###", "Header 3")]\n\n# Main Script Logic\nmarkdown_splitter = MarkdownHeaderTextSplitter(headers_to_split_on=HEADERS_TO_SPLIT_ON)\ntext_splitter = TokenTextSplitter(chunk_size=300, chunk_overlap=30)\n'})}),"\n",(0,i.jsx)(t.p,{children:"For generating QnA pairs, we need to set up the prompt for the LLM to generate the model. For this task, we used GPT-4 to generate QnA pairs but you can also try with any other Local LLMs with a little bit of tweaking on the system prompt."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"You are a curious assistant. Your task is to make 10 pairs of questions and answers using the given context delimited by triple quotation marks. You are extremely critical and can ask questions at different difficulty levels. You will be more generic and unique and focus on the Nitro library (the given context is from Nitro library). And you can also answer with the code block. Your `answer` must be detailed, comprehensive and step by step guide. Let's think step by step. It's really important to my project. Strictly follow the JSON format for output with 1 field `qa_pairs` and `question`, `answer`.\n"})}),"\n",(0,i.jsx)(t.p,{children:"To generate a diverse dataset, we'll configure the LLM to produce 10 QnA pairs per iteration. We'll execute this process three times to enrich the dataset's variety. After setting everything up, let's generate a training dataset."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:"title",children:"# Set up directory\nROOT_DIR = \"PATH/TO/YOUR/DATA/FOLDER\"\nCSV_FILE_PATH = \"PATH/TO/SAVE/OUTPUT/CSV/FILE\"\nREPO_NAME = \"YOUR/HUGGINGFACE/REPO\"\n\n# Initialize data frame\nall_chunks = []\nmaster_df = pd.DataFrame(columns=['question', 'answer', 'raw'])\n\n# Split raw text into chunks\nfor subdir, dirs, files in os.walk(ROOT_DIR):\n    for file in files:\n        if file.endswith('.md'):\n            file_path = os.path.join(subdir, file)\n            file_chunks = process_markdown_file(file_path,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmarkdown_splitter,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttext_splitter)\n            all_chunks.extend(file_chunks)\n\n# Generating QnA pairs with GPT\nfor _ in range(3):\n    for chunk in all_chunks:\n        conversation = [{'role': 'system', 'content': open_file(SYSTEM_FILE_PATH)},\n                        {'role': 'user', 'content': str(chunk)}]\n        response_verification = chatgpt_completion(conversation)\n        qa_pairs = extract_qa_pairs_from_response(response_verification)\n        qa_df = pd.DataFrame(qa_pairs)\n        qa_df['raw'] = [chunk] * len(qa_df)\n        master_df = pd.concat([master_df, qa_df], ignore_index=True)\nmaster_df.to_csv(CSV_FILE_PATH, index=False, encoding='utf-8')\n\n# Deduplication\ndf = pd.read_csv(CSV_FILE_PATH)\ndf_deduplicated = df.drop_duplicates()\ndf_deduplicated['messages'] = df_deduplicated.apply(create_message, axis=1)\n\n# Convert data frame to Huggingface dataset format\nmessages = df_deduplicated['message'].tolist()\nrejected = df_deduplicated['rejected'].tolist()\nhf_dataset = Dataset.from_dict({'messages': messages, 'chosen': messages, 'rejected': rejected})\n\n# Split train and test\nsplit_dataset = hf_dataset.train_test_split(test_size=0.1)\n\n# Push to Hugging Face Hub\nsplit_dataset.push_to_hub(REPO_NAME)\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Please refer to ",(0,i.jsx)(t.strong,{children:"Table 1"})," for samples of the generated dataset."]}),"\n",(0,i.jsx)(t.h2,{id:"3-finetuning",children:(0,i.jsx)(t.strong,{children:"3. Finetuning"})}),"\n",(0,i.jsxs)(t.p,{children:["We use the ",(0,i.jsx)(t.a,{href:"https://github.com/huggingface/alignment-handbook",children:"alignment-handbook"})," from Hugging Face for the training code. This is a well-written library that explains in detail everything about finetuning LLMs. It also provides cutting-edge technology implementation like ",(0,i.jsx)(t.a,{href:"#what-is-lora",children:"LORA/QLoRA"})," or ",(0,i.jsx)(t.a,{href:"#what-is-flash-attention",children:"Flash Attention"})," for efficient training on customer GPUs."]}),"\n",(0,i.jsxs)(t.p,{children:["For installing the alignment-handbook, please follow their ",(0,i.jsx)(t.a,{href:"https://github.com/huggingface/alignment-handbook?tab=readme-ov-file#installation-instructions",children:"installation guide"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["In our training setup, we selected the ",(0,i.jsx)(t.a,{href:"https://huggingface.co/jan-hq/stealth-v1.3",children:"Stealth v1.3"})," model as the foundation. We explored different configurations of LoRA/QLoRA, focusing on the parameters ",(0,i.jsx)(t.code,{children:"r"})," and ",(0,i.jsx)(t.code,{children:"alpha"}),". The ",(0,i.jsx)(t.code,{children:"r"})," parameter, denoting the rank in low-rank adaptation, influences the model's learning capacity and complexity, with higher values offering more flexibility at the risk of overfitting. The ",(0,i.jsx)(t.code,{children:"alpha"})," parameter scales the adaptation's effect, balancing new learning and existing knowledge retention. We found ",(0,i.jsx)(t.code,{children:"r = 256"})," and ",(0,i.jsx)(t.code,{children:"alpha = 512"})," to be effective settings. For more details, see our sample YAML configuration file."]}),"\n",(0,i.jsx)(t.p,{children:"For training the model after installing the repository, you can run the following command:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Command to train LLM with alignment handbook"',children:"ACCELERATE_LOG_LEVEL=info \\\naccelerate launch \\\n  --config_file recipes/accelerate_configs/multi_gpu.yaml \\\n  --num_processes=1 \\\n  scripts/run_sft.py recipes/nitro/sft/config_lora.yaml\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Table 2. Training result of Nitro models."})}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Model"}),(0,i.jsx)(t.th,{children:"r"}),(0,i.jsx)(t.th,{children:"alpha"}),(0,i.jsx)(t.th,{children:"Loss"}),(0,i.jsx)(t.th,{children:"Time"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Nitro E1 LoRA"}),(0,i.jsx)(t.td,{children:"16"}),(0,i.jsx)(t.td,{children:"32"}),(0,i.jsx)(t.td,{children:"1.185"}),(0,i.jsx)(t.td,{children:"3m"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Nitro E3 LoRA"}),(0,i.jsx)(t.td,{children:"16"}),(0,i.jsx)(t.td,{children:"32"}),(0,i.jsx)(t.td,{children:"0.853"}),(0,i.jsx)(t.td,{children:"10m"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Nitro E1 QLoRA"}),(0,i.jsx)(t.td,{children:"256"}),(0,i.jsx)(t.td,{children:"512"}),(0,i.jsx)(t.td,{children:"0.6513"}),(0,i.jsx)(t.td,{children:"6m"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Nitro E3 QLoRA"}),(0,i.jsx)(t.td,{children:"256"}),(0,i.jsx)(t.td,{children:"512"}),(0,i.jsx)(t.td,{children:"0.3123"}),(0,i.jsx)(t.td,{children:"18m"})]})]})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.em,{children:"E: epochs, m: minutes"}),"\n",(0,i.jsx)(t.em,{children:"Note: Training times can vary based on hardware specifications. The provided times are for reference purposes only."})]}),"\n",(0,i.jsx)(t.h2,{id:"4-test-the-model",children:(0,i.jsx)(t.strong,{children:"4. Test the model"})}),"\n",(0,i.jsxs)(t.p,{children:["After training the model, it can be tested locally in the GGUF format using ",(0,i.jsx)(t.a,{href:"https://jan.ai/",children:"Jan"}),". To convert the fine-tuned model to GGUF, you can utilize this convenient ",(0,i.jsx)(t.a,{href:"https://colab.research.google.com/github/mlabonne/llm-course/blob/main/Quantize_Llama_2_models_using_GGUF_and_llama_cpp.ipynb",children:"Google Colab notebook by Maxime Labonne"}),"."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Finetuned Nitro Respond",src:n(52049).A+"",width:"719",height:"385"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Fig 2. Using Jan to run a new fine-tuned model."})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Finetuned Nitro Respond 2",src:n(19840).A+"",width:"645",height:"769"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Fig 3. Model answers a technical question related to Nitro."})}),"\n",(0,i.jsxs)(t.p,{children:["As shown in\xa0",(0,i.jsx)(t.code,{children:"Fig 2"}),", the model successfully learned new information from Nitro's documentation. This indicates that it accurately understands details about Nitro."]}),"\n",(0,i.jsx)(t.h2,{id:"limitations",children:"Limitations"}),"\n",(0,i.jsxs)(t.p,{children:["With this straightforward approach, we show that the model is capable of acquiring new knowledge. However, there's a potential risk of ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Catastrophic_interference",children:"catastrophic forgetting"}),", leading to the model only being good at answering information about Nitro documentation and losing some other abilities."]}),"\n",(0,i.jsx)(t.p,{children:"In our next blog post, we will further discuss this problem and its solution."}),"\n",(0,i.jsx)(t.h2,{id:"conclusions",children:(0,i.jsx)(t.strong,{children:"Conclusions"})}),"\n",(0,i.jsx)(t.p,{children:"In the blog post, we learn how to fine-tune an open-source model using LoRA/QLoRA with documentation of Nitro\u2019s repository on a local machine. We\u2019ve learned:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Data generation using LangChain to chunk the documentation and use LLM to make QnA pairs from unstructured data."}),"\n",(0,i.jsx)(t.li,{children:"Finetuning the model on generated data using QLoRA with high r and alpha setting."}),"\n",(0,i.jsx)(t.li,{children:"Test the model using Jan."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Combining all those steps, we can train our model on every documentation to create our chatbot."}),"\n",(0,i.jsx)(t.h2,{id:"terminology",children:"Terminology"}),"\n",(0,i.jsx)(t.h3,{id:"what-is-instruction-tuning",children:"What is Instruction tuning?"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://openai.com/research/instruction-following",children:"Instruction tuning"})," in LLMs involves refining the model's ability to comprehend and execute text-based instructions more effectively. By training on a diverse set of tasks presented as instructions, the model learns to generalize and apply its knowledge across a wide range of requests, enhancing its responsiveness and accuracy in fulfilling user commands. This process fine-tunes the model on a curated dataset where the inputs are explicit instructions and the desired outputs are model-generated responses, leading to improved performance on instruction-following tasks and a better alignment with user expectations."]}),"\n",(0,i.jsx)(t.h3,{id:"what-is-lora",children:"What is LoRA?"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://arxiv.org/abs/2106.09685",children:"Low-Rank Adaptation"})," (LoRA) is a method that makes fine-tuning large language models more efficient. It breaks down the model's large weight matrices into smaller, trainable matrices. These smaller matrices are the only parts that get updated, leaving the original weights unchanged. This approach significantly reduces the number of parameters that need training, leading to faster and less memory-intensive tuning. Essentially, LoRA is a new way of training LLMs with limited resources but with a little trade-off in performance."]}),"\n",(0,i.jsx)(t.h3,{id:"what-is-langchain",children:"What is Langchain?"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://www.langchain.com/",children:"LangChain"})," is an open-source framework designed to simplify the creation of applications powered by large language models (LLMs), such as chatbots and agents. Exactly like its name, it's a chaining language for developers to easily apply advanced prompt techniques to get the most out of it. It also provides developers with a standardized interface and pre-built components, making advanced language understanding and generation more accessible. By abstracting the complexities of LLM integration, LangChain enables the rapid development of intelligent, context-aware applications. Its collaborative ecosystem encourages innovation, leveraging the community's collective expertise to expand the possibilities of AI-driven solutions."]}),"\n",(0,i.jsx)(t.h3,{id:"what-is-flash-attention",children:"What is Flash Attention?"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://github.com/Dao-AILab/flash-attention",children:"Flash Attention"})," is an algorithm that speeds up the core attention mechanism in Transformer language models by restructuring computations. It uses techniques like tiling and recomputation to reduce the high memory costs of attention, enabling models to process longer text sequences."]})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},46743:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/about-nitro-77d4d2ab8a69afbe7c249c9c617db8a6.png"},19840:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/finetuned-respond-2-3bebfa561e4471585b412e14d605ab7a.png"},52049:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/finetuned-response-f85b89b18e2705073f0632e6cd87183a.png"},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var i=n(96540);const s={},a=i.createContext(s);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);